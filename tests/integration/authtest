const {User} = require('../../models/user');
const {Adress} = require('../../models/adress');
const request = require('supertest');

describe('auth middleware', () => {
  beforeEach(() => {server = require('../../index');})
  afterEach(async () => {
    await Adress.remove({});
    await server.close();
    await User.remove({});
  });

  let token;
  let user;
  let userId;

  const exec = async () => {
    return request(server)
      .post('/api/adress')
      .set('x-auth-token', token)
      .send({
        adress: 'adress1 for testing purpose',
        zipcode: '98115',
        city: 'Seattle',
        state: 'Washington',
        userId: userId
      });
  }

  beforeEach( async () => {
    user = new User({name: 'Cesar Labastida', email: 'dany_baautista@hotmail.com', password: 'something'});
    await user.save();
    token = user.generateAuthToken();
    userId = user._id;
  });

  it('should return 401 if no token is provided', async() =>{
    token = '';
    const res = await exec();
    expect(res.status).toBe(401);
  });

  it('should return 400 if token is invalid', async() =>{
    token = 'a';
    const res = await exec();
    expect(res.status).toBe(400);
  });

  it('should return 200 if token is valid ', async() =>{
    const res = await exec();
    expect(res.status).toBe(200);
  });

});
